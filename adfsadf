warning: in the working copy of 'package-lock.json', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'package.json', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/index.js b/index.js[m
[1mindex 6437969..03db97f 100644[m
[1m--- a/index.js[m
[1m+++ b/index.js[m
[36m@@ -4,6 +4,9 @@[m [mconst fs = require('fs');[m
 const path = require('path');[m
 const url = require('url');[m
 const querystring = require('querystring');[m
[32m+[m[32mconst cookie = require("cookie");[m
[32m+[m
[32m+[m[32mconst db = require('./db/db');[m
 [m
 const authRepository = require('./repositories/authRepository');[m
 const userRepository = require('./repositories/userRepository');[m
[36m@@ -65,18 +68,21 @@[m [mconst server = http.createServer(async (req, res) => {[m
             '/userForm': 'userForm.html',[m
             '/dashboard': 'dashboard.html',[m
             '/artistSongs' : 'artistSongs.html',[m
[31m-            '/test' : 'test.html'[m
[32m+[m[32m            '/test' : 'test.html',[m
[32m+[m[32m            '/login' : 'login.html'[m
         };[m
 [m
         if (pages[parsedUrl.pathname]) {[m
             const cookies = parseCookies(req.headers.cookie);[m
[31m-            if (parsedUrl.pathname === '/dashboard' && cookies.token) {[m
[31m-                try {[m
[31m-                    await authRepository.verifyToken(cookies.token);[m
[31m-                    return serveStaticFile(res, path.join(__dirname, 'views', 'dashboard.html'), 'text/html');[m
[31m-                } catch {[m
[31m-                    res.writeHead(302, { Location: '/login' });[m
[31m-                    return res.end();[m
[32m+[m[32m            if (parsedUrl.pathname === '/dashboard' ) {[m
[32m+[m[32m                if (cookies.token) {[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        await authRepository.verifyToken(cookies.token);[m
[32m+[m[32m                        return serveStaticFile(res, path.join(__dirname, 'views', 'dashboard.html'), 'text/html');[m
[32m+[m[32m                    } catch {[m
[32m+[m[32m                        res.writeHead(302, { Location: '/login' });[m
[32m+[m[32m                        return res.end();[m
[32m+[m[32m                    }[m
                 }[m
             }[m
             return serveStaticFile(res, path.join(__dirname, 'views', pages[parsedUrl.pathname]), 'text/html');[m
[36m@@ -101,9 +107,28 @@[m [mconst server = http.createServer(async (req, res) => {[m
             const queryParams = new URLSearchParams(parsedUrl.query);[m
             const page = parseInt(queryParams.get('page')) || 1;[m
             const limit = parseInt(queryParams.get('limit')) || 5;[m
[31m-          [m
[32m+[m[41m            [m
[32m+[m[32m            const cookies = parseCookies(req.headers.cookie);[m
[32m+[m[32m            console.log(atob(cookies.role));[m
[32m+[m[41m            [m
[32m+[m[32m            const role = cookies.role;[m
[32m+[m
[32m+[m[32m            // atob(text)[m
[32m+[m[32m            let songsData;[m
[32m+[m
             try {[m
[31m-                const { songs, totalSongs } = await songsRepository.listSongs(page, limit);[m
[32m+[m[32m                if (role === "artist") {[m
[32m+[m[32m                    songsData = await songsRepository.listSongsByArtist(id, page, limit);[m
[32m+[m[32m                }[m
[32m+[m[32m                else if (role === "artist_manager") {[m
[32m+[m[32m                    songsData = await songsRepository.listSongsUnderArtistManager(id, page, limit);[m
[32m+[m[32m                }[m[41m [m
[32m+[m[32m                else {[m
[32m+[m[32m                    songsData = await songsRepository.listSongs(page, limit);[m
[32m+[m[32m                }[m
[32m+[m[41m            [m
[32m+[m[32m                const { songs, totalSongs } = songsData;[m
[32m+[m
                 res.writeHead(200, { 'Content-Type': 'application/json' });[m
                 res.end(JSON.stringify({ items: songs, totalItems: totalSongs }));[m
             } catch (error) {[m
[36m@@ -189,14 +214,10 @@[m [mconst server = http.createServer(async (req, res) => {[m
             }[m
             return;[m
         }[m
[32m+[m
         if(parsedUrl.pathname === '/logout'){[m
[31m-          try{[m
[31m-            res.writeHead(302, { 'Set-Cookie': 'token=; Max-Age=0', Location: '/login' });[m
[31m-            return res.end();[m
[31m-          }[m
[31m-          catch (error){[m
[31m-            console.log("Error logging out: " + error);[m
[31m-          }[m
[32m+[m[32m            const cookies = parseCookies(req.headers.cookie);[m
[32m+[m[32m            console.log(cookies);[m
         }[m
 [m
         if (parsedUrl.pathname === '/artistsList') {[m
[36m@@ -209,8 +230,19 @@[m [mconst server = http.createServer(async (req, res) => {[m
                 res.writeHead(500, { 'Content-Type': 'application/json' });[m
                 res.end(JSON.stringify({ message: 'Error fetching artists', error: error.message }));[m
             }[m
[31m-          }[m
[31m-          [m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        if (parsedUrl.pathname === '/managersList') {[m
[32m+[m[32m            try {[m
[32m+[m[32m                const { rows: managers } = await db.query("select id, first_name || ' ' || last_name as name from users where role = 'artist_manager';");[m
[32m+[m[32m                res.writeHead(200, { 'Content-Type': 'application/json' });[m
[32m+[m[41m              [m
[32m+[m[32m                return { managers }[m
[32m+[m[32m            } catch (error) {[m
[32m+[m[32m                res.writeHead(500, { 'Content-Type': 'application/json' });[m
[32m+[m[32m                res.end(JSON.stringify({ message: 'Error fetching artists', error: error.message }));[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m[41m  [m
     }[m
 [m
     // Handle POST requests[m
[36m@@ -228,23 +260,40 @@[m [mconst server = http.createServer(async (req, res) => {[m
                     const result = await authRepository.login(body);[m
                     const parsedResult = JSON.parse(result);[m
                     try{[m
[31m-                        res.setHeader('Access-Control-Expose-Headers', 'Userid, Role');[m
[31m-                        res.writeHead(302, {[m
[31m-                            'Set-Cookie': `token=${parsedResult.token}; HttpOnly; Secure; SameSite=Lax HttpOnly; Secure; SameSite=Lax`,[m
[31m-                            Location: '/dashboard',[m
[31m-                            'userid': parsedResult.user.id,[m
[31m-                            'role': parsedResult.user.role[m
[31m-                        });[m
[31m-                        alert(`Logged in with user: ${parsedResult.user.id} with role ${parsedResult.user.role}`);[m
[31m-[m
[32m+[m[32m                        if(parsedResult.error) {[m
[32m+[m[32m                            res.writeHead(200, { 'Content-Type': 'application/json' });[m
[32m+[m[32m                            return res.end(JSON.stringify({ message: parsedResult.error }));[m
[32m+[m[32m                        }[m
[32m+[m[32m                            res.writeHead(200, {[m
[32m+[m[32m                                "Content-Type": "application/json",[m
[32m+[m[32m                                "Set-Cookie": [[m
[32m+[m[32m                                    `token=${parsedResult.token};`,[m
[32m+[m[32m                                    `userid=${encrypt(parsedResult.user.id)};`,[m
[32m+[m[32m                                    `role=${encrypt(parsedResult.user.role)};`[m
[32m+[m[32m                                ][m
[32m+[m[32m                            });[m
[32m+[m[32m                        res.end(JSON.stringify({[m
[32m+[m[32m                            token: parsedResult.token,[m
[32m+[m[32m                            user: {[m
[32m+[m[32m                                id: parsedResult.user.id,[m
[32m+[m[32m                                role: parsedResult.user.role[m
[32m+[m[32m                            }[m
[32m+[m[32m                        }));[m
                     }[m
[31m-                    catch(err){[m
[31m-                      console.log("Error while writing head: " + err);[m
[32m+[m[32m                    catch (error){[m
[32m+[m[32m                      console.log("Error while writing head: " + error);[m
                     }[m
                     return res.end();[m
                 }[m
                 if (req.url === '/logout') {[m
[31m-                    res.writeHead(302, { 'Set-Cookie': 'token=; Max-Age=0', Location: '/login' });[m
[32m+[m[32m                    res.writeHead(302, {[m[41m [m
[32m+[m[32m                        "Set-Cookie": [[m
[32m+[m[32m                            "token=; Max-Age=0; HttpOnly; Secure; SameSite=Lax",[m
[32m+[m[32m                            "userid=; Max-Age=0; HttpOnly; Secure; SameSite=Lax",[m
[32m+[m[32m                            "role=; Max-Age=0; HttpOnly; Secure; SameSite=Lax"[m
[32m+[m[32m                        ],[m
[32m+[m[32m                        "Location": "/login"[m
[32m+[m[32m                    });[m
                     return res.end();[m
                 }[m
 [m
[36m@@ -291,6 +340,14 @@[m [mconst server = http.createServer(async (req, res) => {[m
     }[m
 });[m
 [m
[32m+[m[32mfunction encrypt(text) {[m
[32m+[m[32m    return btoa(text.toString());[m
[32m+[m[32m}[m
[32m+[m[41m  [m
[32m+[m[32mfunction decrypt(text) {[m
[32m+[m[32m    return atob(text);[m
[32m+[m[32m}[m
[32m+[m
 server.listen(PORT, () => {[m
     console.log(`Server running on port ${PORT}`);[m
 });[m
\ No newline at end of file[m
[1mdiff --git a/package-lock.json b/package-lock.json[m
[1mindex d7325c6..59b9865 100644[m
[1m--- a/package-lock.json[m
[1m+++ b/package-lock.json[m
[36m@@ -10,6 +10,7 @@[m
       "license": "ISC",[m
       "dependencies": {[m
         "bcrypt": "^5.1.1",[m
[32m+[m[32m        "cookie": "^1.0.2",[m
         "dotenv": "^16.4.7",[m
         "jsonwebtoken": "^9.0.2",[m
         "pg": "^8.14.1"[m
[36m@@ -148,6 +149,15 @@[m
       "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",[m
       "license": "ISC"[m
     },[m
[32m+[m[32m    "node_modules/cookie": {[m
[32m+[m[32m      "version": "1.0.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "engines": {[m
[32m+[m[32m        "node": ">=18"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/debug": {[m
       "version": "4.4.0",[m
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",[m
[1mdiff --git a/package.json b/package.json[m
[1mindex 49ac7c8..0b217ca 100644[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -18,6 +18,7 @@[m
   "homepage": "https://github.com/ridim02/AcoustIQ#readme",[m
   "dependencies": {[m
     "bcrypt": "^5.1.1",[m
[32m+[m[32m    "cookie": "^1.0.2",[m
     "dotenv": "^16.4.7",[m
     "jsonwebtoken": "^9.0.2",[m
     "pg": "^8.14.1"[m
[1mdiff --git a/public/js/login.js b/public/js/login.js[m
[1mindex 92f2e13..90b9b66 100644[m
[1m--- a/public/js/login.js[m
[1m+++ b/public/js/login.js[m
[36m@@ -15,9 +15,15 @@[m [mdocument.getElementById("loginForm").addEventListener("submit", async function ([m
             headers: { "Content-Type": "application/json" },[m
             body: body,[m
         });[m
[32m+[m[41m        [m
         const data = await response;[m
         if (response.ok) {[m
[31m-            document.cookie = `token=${data.token};`;[m
[32m+[m[32m            const cookies = parseCookies(document.cookie);[m
[32m+[m[32m            const userId = atob(cookies.userid);[m
[32m+[m[32m            const role = atob(cookies.role);[m
[32m+[m[41m            [m
[32m+[m[32m            alert(`Logged in with user: ${userId} with role ${role}`);[m
[32m+[m[32m            // document.cookie = `token=${data.token};`;[m
             window.location.href = "dashboard";[m
         } else {[m
             alert(data.message || "Login failed.");[m
[36m@@ -26,4 +32,15 @@[m [mdocument.getElementById("loginForm").addEventListener("submit", async function ([m
         console.error("Login error:", error);[m
         alert("Login failed. Please try again.");[m
     }[m
[31m-});  [m
\ No newline at end of file[m
[32m+[m[32m});[m[41m  [m
[32m+[m
[32m+[m[32mfunction parseCookies(cookieHeader) {[m
[32m+[m[32m    const cookies = {};[m
[32m+[m[32m    if (cookieHeader) {[m
[32m+[m[32m        cookieHeader.split(';').forEach(cookie => {[m
[32m+[m[32m            const [key, value] = cookie.trim().split('=');[m
[32m+[m[32m            cookies[key] = decodeURIComponent(value);[m
[32m+[m[32m        });[m
[32m+[m[32m    }[m
[32m+[m[32m    return cookies;[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/public/js/userForm.js b/public/js/userForm.js[m
[1mindex 44481c9..c3a64f6 100644[m
[1m--- a/public/js/userForm.js[m
[1m+++ b/public/js/userForm.js[m
[36m@@ -1,63 +1,113 @@[m
 function encrypt(text) {[m
[31m-    return btoa(text.toString());[m
[32m+[m[32m  return btoa(text.toString());[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunction decrypt(text) {[m
[32m+[m[32m  return atob(text);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunction getQueryParam(param) {[m
[32m+[m[32m  const params = new URLSearchParams(window.location.search);[m
[32m+[m[32m  return params.get(param);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32masync function fetchUserData(id) {[m
[32m+[m[32m  try {[m
[32m+[m[32m    const response = await fetch(`/users/${id}`);[m
[32m+[m[32m    const user = await response.json();[m
[32m+[m[41m    [m
[32m+[m[32m    document.getElementById("first_name").value = user.first_name;[m
[32m+[m[32m    document.getElementById("last_name").value = user.last_name;[m
[32m+[m[32m    document.getElementById("email").value = user.email;[m
[32m+[m[32m    document.getElementById("role").value = user.role;[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m    console.error("Error fetching user data:", error);[m
   }[m
[31m-  [m
[31m-  function decrypt(text) {[m
[31m-    return atob(text);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32masync function fetchManagers() {[m
[32m+[m[32m  try {[m
[32m+[m[32m      const response = await fetch('/managersList');[m
[32m+[m[32m      const artists = await response.json();[m
[32m+[m[41m      [m
[32m+[m[32m      const managerDropdown = document.getElementById("manager_id");[m
[32m+[m[32m      managerDropdown.innerHTML = '<option value="">Select an Manager</option>';[m
[32m+[m
[32m+[m[32m      artists.forEach(artist => {[m
[32m+[m[32m        const option = document.createElement("option");[m
[32m+[m[32m        option.value = artist.id;[m
[32m+[m[32m        option.textContent = artist.name;[m
[32m+[m[32m        artistDropdown.appendChild(option);[m
[32m+[m[32m      });[m
[32m+[m[32m  } catch (error) {[m
[32m+[m[32m      console.error("Error fetching managers:", error);[m
   }[m
[31m-  [m
[31m-  function getQueryParam(param) {[m
[31m-    const params = new URLSearchParams(window.location.search);[m
[31m-    return params.get(param);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdocument.addEventListener("DOMContentLoaded", () => {[m
[32m+[m[32m  const encryptedId = getQueryParam("userId");[m
[32m+[m[32m  const userForm = document.getElementById("userForm");[m
[32m+[m
[32m+[m[32m  if (encryptedId) {[m
[32m+[m[32m    const userId = decrypt(encryptedId);[m
[32m+[m[32m    fetchUserData(userId);[m
   }[m
[31m-  [m
[31m-  async function fetchUserData(id) {[m
[31m-    try {[m
[31m-      const response = await fetch(`/users/${id}`);[m
[31m-      c